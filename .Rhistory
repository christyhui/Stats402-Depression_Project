depression_cvglm2$resample
depression_cvglm2$method
depression_cvglm2$metric
depression_cvglm2$finalModel
depression_glm2
cbind(depression_glm$deviance, depression_glm2$deviance)
rbind(depression_glm$deviance, depression_glm2$deviance)
rbind("First Model" = depression_glm$deviance, depression_glm2$deviance)
rbind("First Model Deviance" = depression_glm$deviance, "Second Model Deviance" = depression_glm2$deviance)
data.frame("First Model" = depression_glm$deviance, "Second Model" = depression_glm2$deviance)
print("First Model Residual Deviance: ", depression_glm$deviance)
print0("First Model Residual Deviance: ", depression_glm$deviance)
print("First Model Residual Deviance: " + depression_glm$deviance)
paste("First Model Residual Deviance: ", depression_glm$deviance)
paste("First Model Residual Deviance: ", depression_glm$deviance)
paste("Second Model Residual Deviance: ", depression_glm2$deviance)
glm_predictions4 = predict(depression_glm2, newdata = depression_test)
glm_predictions4 = ifelse(glm_predictions4 > 0.5, "Yes", "No")
glm_predictions4 = as.factor(glm_predictions4)
confusionMatrix(glm_predictions4, depression_test$Depression)
glm_predictions4 = predict(depression_glm2, newdata = depression_test)
glm_predictions4 = ifelse(glm_predictions4 > 0.35, "Yes", "No")
glm_predictions4 = as.factor(glm_predictions4)
confusionMatrix(glm_predictions4, depression_test$Depression)
print(depression_cvglm2)
train_control = trainControl(method = "repeatedcv", number = 10, repeats = 5, classProbs = TRUE)
depression_cvglm = train(Depression ~ .,
data = depression_train,
method = "glm",
family = binomial,
trControl = train_control)
depression_cvglm$results
cvglm_predictions = predict(depression_cvglm, depression_test)
confusionMatrix(cvglm_predictions, depression_test$Depression)
varImp(depression_cvglm)
train_control2 = trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
depression_cvglm2 = train(Depression ~ Age + Pressure + Satisfaction + Work.Study.Hours + Financial.Stress,
data = depression_train,
method = "glm",
family = binomial,
trControl = train_control2)
depression_cvglm2$results
train_control2 = trainControl(method = "repeatedcv", number = 10, repeats = 5, classProbs = TRUE)
depression_cvglm2 = train(Depression ~ Age + Pressure + Satisfaction + Work.Study.Hours + Financial.Stress,
data = depression_train,
method = "glm",
family = binomial,
trControl = train_control2)
depression_cvglm2$results
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
library(caret)
library(ROCR)
depression = read.csv("final_depression_dataset_1.csv")
# find the dimension of depression
dim(depression)
# find if there exist duplicates
sum(duplicated(depression))
# find number of NAs for each column
sapply(depression, function(x) {sum(is.na(x))})
# combine pressure columns into one
helper1 = ifelse(is.na(depression$Academic.Pressure), 0, depression$Academic.Pressure)
helper2 = ifelse(is.na(depression$Work.Pressure), 0, depression$Work.Pressure)
depression$Pressure = helper1 + helper2
# combine satisfaction into one column
helper3 = ifelse(is.na(depression$Study.Satisfaction), 0, depression$Study.Satisfaction)
helper4 = ifelse(is.na(depression$Job.Satisfaction), 0, depression$Job.Satisfaction)
depression$Satisfaction = helper3 + helper4
# delete columns with NAs
depression = depression[, -c(7:11)]
sapply(depression, function(x) {sum(is.na(x))})
# due to a large amount of varied answers for "City" and "Profession," we delete the variables
# we also delete name because we don't care about that variable
unique(depression$City)
unique(depression$Profession)
depression = subset(depression, select = -c(Name, City, Profession))
# degree has many varied answers as well; however, they can be recoded into three main categories: high school equivalent, bachelors, masters, PhD
unique(depression$Degree)
depression$Degree = case_when(depression$Degree == "Class 12" ~ "High School Equivalent",
grepl("^[BL]", depression$Degree) ~ "Bachelors Degree",
grepl("^[MP]", depression$Degree) ~ "Post-Graduate Degree")
table(depression$Degree)
# find type of each variable so we can change each type
sapply(depression, function(x) {class(x)})
# change each categorical into a factor, changing the base/ordering them if needed
depression$Gender = as.factor(depression$Gender)
depression$Working.Professional.or.Student = as.factor(depression$Working.Professional.or.Student)
depression$Sleep.Duration = factor(depression$Sleep.Duration, levels = c("Less than 5 hours", "5-6 hours", "7-8 hours", "More than 8 hours", ordered = TRUE))
depression$Dietary.Habits = factor(depression$Dietary.Habits, levels = c("Unhealthy", "Moderate", "Healthy"))
depression$Degree = factor(depression$Degree, levels = c("High School Equivalent", "Bachelors Degree", "Post-Graduate Degree"))
depression$Have.you.ever.had.suicidal.thoughts.. = as.factor(depression$Have.you.ever.had.suicidal.thoughts..)
depression$Financial.Stress = factor(depression$Financial.Stress, levels = c(1, 2, 3, 4, 5))
depression$Family.History.of.Mental.Illness = as.factor(depression$Family.History.of.Mental.Illness)
depression$Depression = as.factor(depression$Depression)
depression$Pressure = factor(depression$Pressure, levels = c(1, 2, 3, 4, 5))
depression$Satisfaction = factor(depression$Satisfaction, levels = c(1, 2, 3, 4, 5))
depressionFactored = select(depression, where(is.factor))
sapply(depressionFactored, table)
# plot depression count
ggplot(depression, aes(x = Depression)) +
geom_bar(aes(fill = Depression)) +
xlab("Depression") +
ylab("Count") +
ggtitle("Barplot of Depression") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot gender
ggplot(depression, aes(x = Gender)) +
geom_bar(aes(fill = Depression)) +
ylab("Count")
ggtitle("Barplot of Gender") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot whether or not person is a working professional or student
ggplot(depression, aes(x = Working.Professional.or.Student)) +
geom_bar(aes(fill = Depression)) +
xlab("Occupation") +
ylab("Count") +
ggtitle("Barplot of Professional/Student") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot sleep duration habits
ggplot(depression, aes(x = Sleep.Duration)) +
geom_bar(aes(fill = Depression)) +
xlab("Sleep Duration") +
ylab("Count") +
ggtitle("Barplot of Sleep Duration") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot dietary habits
ggplot(depression, aes(x = Dietary.Habits)) +
geom_bar(aes(fill = Depression)) +
xlab("Dietary Habits") +
ylab("Count") +
ggtitle("Barplot of Dietary Habits") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot degree count
ggplot(depression, aes(x = Degree)) +
geom_bar(aes(fill = Depression)) +
xlab("Degree") +
ylab("Count") +
ggtitle("Barplot of Degree") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot degree count
ggplot(depression, aes(x = Have.you.ever.had.suicidal.thoughts..)) +
geom_bar(aes(fill = Depression)) +
xlab("Suicidal Thoughts") +
ylab("Count") +
ggtitle("Barplot of Suicidal Thoughts") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# variables look highly correlated, especially when we plot a table of depression and suicidal thoughts
table(depression$Have.you.ever.had.suicidal.thoughts.., depression$Depression)
# delete suicidal thoughts variable
depression = subset(depression, select = -c(Have.you.ever.had.suicidal.thoughts..))
# plot financial stress count
ggplot(depression, aes(x = Financial.Stress)) +
geom_bar(aes(fill = Depression)) +
xlab("Financial Stress Score") +
ylab("Count") +
ggtitle("Barplot of Financial Stress Score") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot family history of mental illness count
ggplot(depression, aes(x = Family.History.of.Mental.Illness)) +
geom_bar(aes(fill = Depression)) +
xlab("Mental Illness Family History") +
ylab("Count") +
ggtitle("Barplot of Mental Illness Family History") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
ggplot(depression, aes(x = Pressure)) +
geom_bar(aes(fill = Depression)) +
xlab("Financial Stress Score") +
ylab("Count") +
ggtitle("Barplot of Pressure Score") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
ggplot(depression, aes(x = Satisfaction)) +
geom_bar(aes(fill = Depression)) +
xlab("Satisfaction Score") +
ylab("Count") +
ggtitle("Barplot of Pressure Score") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
depressionYes = depression[depression$Depression == "Yes", ]
depressionNo = depression[depression$Depression == "No", ]
p1 = ggplot(depressionYes, aes(x = Age, y = after_stat(density))) +
geom_histogram(binwidth = 1, fill="#69B3A2", color = "#E9ECEF") +
geom_density(color = "#FF9933", linewidth = 0.7, adjust = 0.3) +
ggtitle("Frequency of Age of Depressed Yes") +
ylab("Frequency")
p2 = ggplot(depressionNo, aes(x = Age, y = after_stat(density))) +
geom_histogram(binwidth = 1, fill="#69B3A2", color = "#E9ECEF") +
geom_density(color = "#FF9933", linewidth = 0.7, adjust = 0.3) +
ggtitle("Frequency of Age of Depressed No") +
ylab("Frequency")
plot_grid(p1, p2)
p3 = ggplot(depressionYes, aes(x = Work.Study.Hours, y = after_stat(density))) +
geom_histogram(binwidth = 1, fill="#69B3A2", color = "#E9ECEF") +
geom_density(color = "#FF9933", linewidth = 0.7, adjust = 1) +
ggtitle("Frequency of Hours Spent Working/Studying of Depressed Yes") +
xlab("Hours Spent Working/Studying") +
ylab("Frequency")
p4 = ggplot(depressionNo, aes(x = Work.Study.Hours, y = after_stat(density))) +
geom_histogram(binwidth = 1, fill="#69B3A2", color = "#E9ECEF") +
geom_density(color = "#FF9933", linewidth = 0.7, adjust = 1) +
ggtitle("Frequency of Hours Spent Working/Studying of Depressed No") +
xlab("Hours Spent Working/Studying") +
ylab("Frequency")
plot_grid(p3, p4)
# create train and test set
set.seed(213)
index = createDataPartition(depression$Depression, p = 0.80, list = FALSE, times = 1)
depression_train = depression[index,]
depression_test = depression[-index,]
# create model with all predictors (no interaction effects)
depression_glm = glm(Depression ~ ., data = depression_train, family = "binomial")
summary(depression_glm)
# draw a roc curve for true positive rate and true negative rate to find the optimal cutoff
glm_predictions = predict(depression_glm, newdata = depression_test, type = "response")
prob_predictions = prediction(glm_predictions, depression_test$Depression)
roc_curve = performance(prob_predictions, "tpr", "fpr")
plot(roc_curve, colorize = TRUE)
abline(0, 1)
# auc value
unlist(slot(performance(prob_predictions, "auc"), "y.values"))
acc = performance(prob_predictions, "acc")
plot(acc)
abline(0, 1)
glm_predictions2 = predict(depression_glm, newdata = depression_test)
glm_predictions2 = ifelse(glm_predictions2 > 0.30, "Yes", "No")
glm_predictions2 = as.factor(glm_predictions2)
confusionMatrix(glm_predictions2, depression_test$Depression)
# create models for interaction effects of each categorical variable and see if there are any significant
summary(glm(Depression ~ Gender*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Working.Professional.or.Student*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Sleep.Duration*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Dietary.Habits*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Degree*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Work.Study.Hours*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Financial.Stress*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Family.History.of.Mental.Illness*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Pressure*., data = depression_train, family = "binomial"))
summary(glm(Depression ~ Satisfaction*., data = depression_train, family = "binomial"))
vI = cbind(varImp(depression_glm), summary(depression_glm)$coefficients[-1, c(1, 4)])
vI[order(-vI$Overall), , drop = FALSE]
depression_glm2 = glm(Depression ~ Age + Pressure + Satisfaction + Work.Study.Hours + Financial.Stress, data = depression_train, family = "binomial")
summary(depression_glm2)
# draw a roc curve for true positive rate and true negative rate to find the optimal cutoff
glm_predictions3 = predict(depression_glm2, newdata = depression_test, type = "response")
prob_predictions2 = prediction(glm_predictions3, depression_test$Depression)
roc_curve2 = performance(prob_predictions, "tpr", "fpr")
plot(roc_curve2, colorize = TRUE)
abline(0, 1)
# auc value
unlist(slot(performance(prob_predictions2, "auc"), "y.values"))
acc2 = performance(prob_predictions2, "acc")
plot(acc2)
abline(0, 1)
glm_predictions4 = predict(depression_glm2, newdata = depression_test)
glm_predictions4 = ifelse(glm_predictions4 > 0.35, "Yes", "No")
glm_predictions4 = as.factor(glm_predictions4)
confusionMatrix(glm_predictions4, depression_test$Depression)
paste("First Model Residual Deviance: ", depression_glm$deviance)
paste("Second Model Residual Deviance: ", depression_glm2$deviance)
train_control = trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
depression_cvglm = train(Depression ~ .,
data = depression_train,
method = "glm",
family = binomial,
trControl = train_control)
depression_cvglm$results
cvglm_predictions = predict(depression_cvglm, depression_test)
confusionMatrix(cvglm_predictions, depression_test$Depression)
varImp(depression_cvglm)
train_control2 = trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
depression_cvglm2 = train(Depression ~ Age + Pressure + Satisfaction + Work.Study.Hours + Financial.Stress,
data = depression_train,
method = "glm",
family = binomial,
trControl = train_control2)
depression_cvglm2$results
cvglm_predictions2 = predict(depression_cvglm2, depression_test)
confusionMatrix(cvglm_predictions2, depression_test$Depression)
varImp(depression_cvglm2)
knitr::opts_chunk$set(echo = TRUE)
cbind(depression_cvglm1, depression_cvglm2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
library(caret)
library(ROCR)
depression = read.csv("final_depression_dataset_1.csv")
# find the dimension of depression
dim(depression)
# find if there exist duplicates
sum(duplicated(depression))
# find number of NAs for each column
sapply(depression, function(x) {sum(is.na(x))})
# combine pressure columns into one
helper1 = ifelse(is.na(depression$Academic.Pressure), 0, depression$Academic.Pressure)
helper2 = ifelse(is.na(depression$Work.Pressure), 0, depression$Work.Pressure)
depression$Pressure = helper1 + helper2
# combine satisfaction into one column
helper3 = ifelse(is.na(depression$Study.Satisfaction), 0, depression$Study.Satisfaction)
helper4 = ifelse(is.na(depression$Job.Satisfaction), 0, depression$Job.Satisfaction)
depression$Satisfaction = helper3 + helper4
# delete columns with NAs
depression = depression[, -c(7:11)]
sapply(depression, function(x) {sum(is.na(x))})
# due to a large amount of varied answers for "City" and "Profession," we delete the variables
# we also delete name because we don't care about that variable
unique(depression$City)
unique(depression$Profession)
depression = subset(depression, select = -c(Name, City, Profession))
# degree has many varied answers as well; however, they can be recoded into three main categories: high school equivalent, bachelors, masters, PhD
unique(depression$Degree)
depression$Degree = case_when(depression$Degree == "Class 12" ~ "High School Equivalent",
grepl("^[BL]", depression$Degree) ~ "Bachelors Degree",
grepl("^[MP]", depression$Degree) ~ "Post-Graduate Degree")
table(depression$Degree)
# find type of each variable so we can change each type
sapply(depression, function(x) {class(x)})
# change each categorical into a factor, changing the base/ordering them if needed
depression$Gender = as.factor(depression$Gender)
depression$Working.Professional.or.Student = as.factor(depression$Working.Professional.or.Student)
depression$Sleep.Duration = factor(depression$Sleep.Duration, levels = c("Less than 5 hours", "5-6 hours", "7-8 hours", "More than 8 hours", ordered = TRUE))
depression$Dietary.Habits = factor(depression$Dietary.Habits, levels = c("Unhealthy", "Moderate", "Healthy"))
depression$Degree = factor(depression$Degree, levels = c("High School Equivalent", "Bachelors Degree", "Post-Graduate Degree"))
depression$Have.you.ever.had.suicidal.thoughts.. = as.factor(depression$Have.you.ever.had.suicidal.thoughts..)
depression$Financial.Stress = factor(depression$Financial.Stress, levels = c(1, 2, 3, 4, 5))
depression$Family.History.of.Mental.Illness = as.factor(depression$Family.History.of.Mental.Illness)
depression$Depression = as.factor(depression$Depression)
depression$Pressure = factor(depression$Pressure, levels = c(1, 2, 3, 4, 5))
depression$Satisfaction = factor(depression$Satisfaction, levels = c(1, 2, 3, 4, 5))
depressionFactored = select(depression, where(is.factor))
sapply(depressionFactored, table)
# plot depression count
ggplot(depression, aes(x = Depression)) +
geom_bar(aes(fill = Depression)) +
xlab("Depression") +
ylab("Count") +
ggtitle("Barplot of Depression") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot gender
ggplot(depression, aes(x = Gender)) +
geom_bar(aes(fill = Depression)) +
ylab("Count")
ggtitle("Barplot of Gender") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot whether or not person is a working professional or student
ggplot(depression, aes(x = Working.Professional.or.Student)) +
geom_bar(aes(fill = Depression)) +
xlab("Occupation") +
ylab("Count") +
ggtitle("Barplot of Professional/Student") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot sleep duration habits
ggplot(depression, aes(x = Sleep.Duration)) +
geom_bar(aes(fill = Depression)) +
xlab("Sleep Duration") +
ylab("Count") +
ggtitle("Barplot of Sleep Duration") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot dietary habits
ggplot(depression, aes(x = Dietary.Habits)) +
geom_bar(aes(fill = Depression)) +
xlab("Dietary Habits") +
ylab("Count") +
ggtitle("Barplot of Dietary Habits") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot degree count
ggplot(depression, aes(x = Degree)) +
geom_bar(aes(fill = Depression)) +
xlab("Degree") +
ylab("Count") +
ggtitle("Barplot of Degree") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot degree count
ggplot(depression, aes(x = Have.you.ever.had.suicidal.thoughts..)) +
geom_bar(aes(fill = Depression)) +
xlab("Suicidal Thoughts") +
ylab("Count") +
ggtitle("Barplot of Suicidal Thoughts") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# variables look highly correlated, especially when we plot a table of depression and suicidal thoughts
table(depression$Have.you.ever.had.suicidal.thoughts.., depression$Depression)
# delete suicidal thoughts variable
depression = subset(depression, select = -c(Have.you.ever.had.suicidal.thoughts..))
# plot financial stress count
ggplot(depression, aes(x = Financial.Stress)) +
geom_bar(aes(fill = Depression)) +
xlab("Financial Stress Score") +
ylab("Count") +
ggtitle("Barplot of Financial Stress Score") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
# plot family history of mental illness count
ggplot(depression, aes(x = Family.History.of.Mental.Illness)) +
geom_bar(aes(fill = Depression)) +
xlab("Mental Illness Family History") +
ylab("Count") +
ggtitle("Barplot of Mental Illness Family History") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
ggplot(depression, aes(x = Pressure)) +
geom_bar(aes(fill = Depression)) +
xlab("Financial Stress Score") +
ylab("Count") +
ggtitle("Barplot of Pressure Score") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
ggplot(depression, aes(x = Satisfaction)) +
geom_bar(aes(fill = Depression)) +
xlab("Satisfaction Score") +
ylab("Count") +
ggtitle("Barplot of Pressure Score") +
geom_text(aes(label = ..count..), stat = "count", vjust = 2)
depressionYes = depression[depression$Depression == "Yes", ]
depressionNo = depression[depression$Depression == "No", ]
p1 = ggplot(depressionYes, aes(x = Age, y = after_stat(density))) +
geom_histogram(binwidth = 1, fill="#69B3A2", color = "#E9ECEF") +
geom_density(color = "#FF9933", linewidth = 0.7, adjust = 0.3) +
ggtitle("Frequency of Age of Depressed Yes") +
ylab("Frequency")
p2 = ggplot(depressionNo, aes(x = Age, y = after_stat(density))) +
geom_histogram(binwidth = 1, fill="#69B3A2", color = "#E9ECEF") +
geom_density(color = "#FF9933", linewidth = 0.7, adjust = 0.3) +
ggtitle("Frequency of Age of Depressed No") +
ylab("Frequency")
plot_grid(p1, p2)
p3 = ggplot(depressionYes, aes(x = Work.Study.Hours, y = after_stat(density))) +
geom_histogram(binwidth = 1, fill="#69B3A2", color = "#E9ECEF") +
geom_density(color = "#FF9933", linewidth = 0.7, adjust = 1) +
ggtitle("Frequency of Hours Spent Working/Studying of Depressed Yes") +
xlab("Hours Spent Working/Studying") +
ylab("Frequency")
p4 = ggplot(depressionNo, aes(x = Work.Study.Hours, y = after_stat(density))) +
geom_histogram(binwidth = 1, fill="#69B3A2", color = "#E9ECEF") +
geom_density(color = "#FF9933", linewidth = 0.7, adjust = 1) +
ggtitle("Frequency of Hours Spent Working/Studying of Depressed No") +
xlab("Hours Spent Working/Studying") +
ylab("Frequency")
plot_grid(p3, p4)
# create train and test set
set.seed(213)
index = createDataPartition(depression$Depression, p = 0.80, list = FALSE, times = 1)
depression_train = depression[index,]
depression_test = depression[-index,]
# create model with all predictors (no interaction effects)
depression_glm = glm(Depression ~ ., data = depression_train, family = "binomial")
summary(depression_glm)
# draw a roc curve for true positive rate and true negative rate to find the optimal cutoff
glm_predictions = predict(depression_glm, newdata = depression_test, type = "response")
prob_predictions = prediction(glm_predictions, depression_test$Depression)
roc_curve = performance(prob_predictions, "tpr", "fpr")
plot(roc_curve, colorize = TRUE)
abline(0, 1)
# auc value
unlist(slot(performance(prob_predictions, "auc"), "y.values"))
acc = performance(prob_predictions, "acc")
plot(acc)
abline(0, 1)
glm_predictions2 = predict(depression_glm, newdata = depression_test)
glm_predictions2 = ifelse(glm_predictions2 > 0.30, "Yes", "No")
glm_predictions2 = as.factor(glm_predictions2)
confusionMatrix(glm_predictions2, depression_test$Depression)
# create models for interaction effects of each categorical variable and see if there are any significant
summary(glm(Depression ~ Gender*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Working.Professional.or.Student*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Sleep.Duration*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Dietary.Habits*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Degree*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Work.Study.Hours*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Financial.Stress*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Family.History.of.Mental.Illness*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Pressure*., data = depression_train, family = "binomial"))
# summary(glm(Depression ~ Satisfaction*., data = depression_train, family = "binomial"))
vI = cbind(varImp(depression_glm), summary(depression_glm)$coefficients[-1, c(1, 4)])
vI[order(-vI$Overall), , drop = FALSE]
depression_glm2 = glm(Depression ~ Age + Pressure + Satisfaction + Work.Study.Hours + Financial.Stress, data = depression_train, family = "binomial")
summary(depression_glm2)
# draw a roc curve for true positive rate and true negative rate to find the optimal cutoff
glm_predictions3 = predict(depression_glm2, newdata = depression_test, type = "response")
prob_predictions2 = prediction(glm_predictions3, depression_test$Depression)
roc_curve2 = performance(prob_predictions, "tpr", "fpr")
plot(roc_curve2, colorize = TRUE)
abline(0, 1)
# auc value
unlist(slot(performance(prob_predictions2, "auc"), "y.values"))
acc2 = performance(prob_predictions2, "acc")
plot(acc2)
abline(0, 1)
glm_predictions4 = predict(depression_glm2, newdata = depression_test)
glm_predictions4 = ifelse(glm_predictions4 > 0.35, "Yes", "No")
glm_predictions4 = as.factor(glm_predictions4)
confusionMatrix(glm_predictions4, depression_test$Depression)
paste("First Model Residual Deviance: ", depression_glm$deviance)
paste("Second Model Residual Deviance: ", depression_glm2$deviance)
train_control = trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
depression_cvglm = train(Depression ~ .,
data = depression_train,
method = "glm",
family = binomial,
trControl = train_control)
depression_cvglm$results
cvglm_predictions = predict(depression_cvglm, depression_test)
confusionMatrix(cvglm_predictions, depression_test$Depression)
varImp(depression_cvglm)
train_control2 = trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
depression_cvglm2 = train(Depression ~ Age + Pressure + Satisfaction + Work.Study.Hours + Financial.Stress,
data = depression_train,
method = "glm",
family = binomial,
trControl = train_control2)
depression_cvglm2$results
cvglm_predictions2 = predict(depression_cvglm2, depression_test)
confusionMatrix(cvglm_predictions2, depression_test$Depression)
cbind(depression_cvglm1, depression_cvglm2)
cbind(depression_cvglm, depression_cvglm2)
cbind(varImp(depression_cvglm), varImp(depression_cvglm2))
varImp(depression_cvglm)
